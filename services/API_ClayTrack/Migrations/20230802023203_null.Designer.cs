// <auto-generated />
using System;
using API_ClayTrack.DataBase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API_ClayTrack.Migrations
{
    [DbContext(typeof(ClayTrackDbContext))]
    [Migration("20230802023203_null")]
    partial class @null
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("API_ClayTrack.Models.CatClient", b =>
                {
                    b.Property<int>("idCatClient")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idCatClient"));

                    b.Property<int>("fkCatPerson")
                        .HasColumnType("int");

                    b.Property<string>("fkRol")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("fkUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("idCatClient");

                    b.HasIndex("fkCatPerson");

                    b.HasIndex("fkRol");

                    b.HasIndex("fkUser");

                    b.ToTable("CatClient");
                });

            modelBuilder.Entity("API_ClayTrack.Models.CatColor", b =>
                {
                    b.Property<int>("idCatColor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idCatColor"));

                    b.Property<DateTime>("creationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("hexadecimal")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("updateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("idCatColor");

                    b.ToTable("CatColor");
                });

            modelBuilder.Entity("API_ClayTrack.Models.CatEmployee", b =>
                {
                    b.Property<int>("idCatEmployee")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idCatEmployee"));

                    b.Property<int>("fkCatPerson")
                        .HasColumnType("int");

                    b.Property<string>("fkRol")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("fkUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("idCatEmployee");

                    b.HasIndex("fkCatPerson");

                    b.HasIndex("fkRol");

                    b.HasIndex("fkUser");

                    b.ToTable("CatEmployee");
                });

            modelBuilder.Entity("API_ClayTrack.Models.CatPerson", b =>
                {
                    b.Property<int>("idCatPerson")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idCatPerson"));

                    b.Property<string>("apartmentNumber")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("creationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("middleName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("neighborhood")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("postalCode")
                        .HasColumnType("int");

                    b.Property<bool>("status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("street")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("streetNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("updateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("idCatPerson");

                    b.ToTable("CatPerson");
                });

            modelBuilder.Entity("API_ClayTrack.Models.CatPurchase", b =>
                {
                    b.Property<int>("idCatPurchase")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idCatPurchase"));

                    b.Property<DateTime>("creationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("fkCatEmployee")
                        .HasColumnType("int");

                    b.Property<int>("fkCatSupplier")
                        .HasColumnType("int");

                    b.Property<float>("total")
                        .HasColumnType("real");

                    b.Property<DateTime>("updateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("idCatPurchase");

                    b.HasIndex("fkCatEmployee");

                    b.HasIndex("fkCatSupplier");

                    b.ToTable("CatPurchase");
                });

            modelBuilder.Entity("API_ClayTrack.Models.CatRawMaterial", b =>
                {
                    b.Property<int>("idCatRawMaterial")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idCatRawMaterial"));

                    b.Property<DateTime>("creationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("fkCatUnitMeasure")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("quantityPackage")
                        .HasColumnType("int");

                    b.Property<int>("quantityWarehouse")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<bool>("status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("updateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("idCatRawMaterial");

                    b.HasIndex("fkCatUnitMeasure");

                    b.ToTable("CatRawMaterial");
                });

            modelBuilder.Entity("API_ClayTrack.Models.CatRecipe", b =>
                {
                    b.Property<int>("idCatRecipe")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idCatRecipe"));

                    b.Property<DateTime>("creationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("fkCatSize")
                        .HasColumnType("int");

                    b.Property<string>("imagePath")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<float>("price")
                        .HasColumnType("real");

                    b.Property<int>("quantityStock")
                        .HasColumnType("int");

                    b.Property<bool>("status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("updateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("idCatRecipe");

                    b.HasIndex("fkCatSize");

                    b.ToTable("CatRecipe");
                });

            modelBuilder.Entity("API_ClayTrack.Models.CatSale", b =>
                {
                    b.Property<int>("idCatSale")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idCatSale"));

                    b.Property<DateTime>("creationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("fkCatClient")
                        .HasColumnType("int");

                    b.Property<float>("total")
                        .HasColumnType("real");

                    b.Property<DateTime>("updateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("idCatSale");

                    b.HasIndex("fkCatClient");

                    b.ToTable("CatSale");
                });

            modelBuilder.Entity("API_ClayTrack.Models.CatShipment", b =>
                {
                    b.Property<int>("idCatShipment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idCatShipment"));

                    b.Property<DateTime>("creationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<bool>("delivered")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("fkCatEmployee")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("fkCatSale")
                        .HasColumnType("int");

                    b.Property<DateTime>("updateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("idCatShipment");

                    b.HasIndex("fkCatEmployee");

                    b.HasIndex("fkCatSale");

                    b.ToTable("CatShipment");
                });

            modelBuilder.Entity("API_ClayTrack.Models.CatSize", b =>
                {
                    b.Property<int>("idCatSize")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idCatSize"));

                    b.Property<string>("abbreviation")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("creationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("updateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("idCatSize");

                    b.ToTable("CatSize");
                });

            modelBuilder.Entity("API_ClayTrack.Models.CatSupplier", b =>
                {
                    b.Property<int>("idCatSupplier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idCatSupplier"));

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("fkCatPerson")
                        .HasColumnType("int");

                    b.HasKey("idCatSupplier");

                    b.HasIndex("fkCatPerson");

                    b.ToTable("CatSupplier");
                });

            modelBuilder.Entity("API_ClayTrack.Models.CatUnitMeasure", b =>
                {
                    b.Property<int>("idCatUnitMeasure")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idCatUnitMeasure"));

                    b.Property<DateTime>("creationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("updateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("idCatUnitMeasure");

                    b.ToTable("CatUnitMeasure");
                });

            modelBuilder.Entity("API_ClayTrack.Models.DetailPurchase", b =>
                {
                    b.Property<int>("idDetailPurchase")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idDetailPurchase"));

                    b.Property<int>("fkCatPurchase")
                        .HasColumnType("int");

                    b.Property<int>("fkCatRawMaterial")
                        .HasColumnType("int");

                    b.Property<float>("price")
                        .HasColumnType("real");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.HasKey("idDetailPurchase");

                    b.HasIndex("fkCatPurchase");

                    b.HasIndex("fkCatRawMaterial");

                    b.ToTable("DetailPurchase");
                });

            modelBuilder.Entity("API_ClayTrack.Models.DetailRecipeColor", b =>
                {
                    b.Property<int>("idDetailRecipeColor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idDetailRecipeColor"));

                    b.Property<int>("fkCatColor")
                        .HasColumnType("int");

                    b.Property<int>("fkCatRecipe")
                        .HasColumnType("int");

                    b.HasKey("idDetailRecipeColor");

                    b.HasIndex("fkCatColor");

                    b.HasIndex("fkCatRecipe");

                    b.ToTable("DetailRecipeColor");
                });

            modelBuilder.Entity("API_ClayTrack.Models.DetailRecipeRawMaterial", b =>
                {
                    b.Property<int>("idDetailRecipeRawMaterial")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idDetailRecipeRawMaterial"));

                    b.Property<int>("fkCatRawMaterial")
                        .HasColumnType("int");

                    b.Property<int>("fkCatRecipe")
                        .HasColumnType("int");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.HasKey("idDetailRecipeRawMaterial");

                    b.HasIndex("fkCatRawMaterial");

                    b.HasIndex("fkCatRecipe");

                    b.ToTable("DetailRecipeRawMaterial");
                });

            modelBuilder.Entity("API_ClayTrack.Models.DetailSale", b =>
                {
                    b.Property<int>("idDetailSale")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idDetailSale"));

                    b.Property<int>("RecipeidCatRecipe")
                        .HasColumnType("int");

                    b.Property<int>("fkCatRecipe")
                        .HasColumnType("int");

                    b.Property<int>("fkCatSale")
                        .HasColumnType("int");

                    b.Property<float>("price")
                        .HasColumnType("real");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.HasKey("idDetailSale");

                    b.HasIndex("RecipeidCatRecipe");

                    b.HasIndex("fkCatSale");

                    b.ToTable("DetailSale");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c309fa92-2123-47be-b397-a1c77adb502c",
                            ConcurrencyStamp = "c309fa92-2123-47be-b397-a1c77adb502c",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "a71a55d6-99d7-4123-b4e0-1218ecb90e3e",
                            ConcurrencyStamp = "a71a55d6-99d7-4123-b4e0-1218ecb90e3e",
                            Name = "Client",
                            NormalizedName = "CLIENT"
                        },
                        new
                        {
                            Id = "c309fa92-2123-47be-b397-adfdgdfg3344",
                            ConcurrencyStamp = "c309fa92-2123-47be-b397-adfdgdfg3344",
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("API_ClayTrack.Models.CatClient", b =>
                {
                    b.HasOne("API_ClayTrack.Models.CatPerson", "Person")
                        .WithMany()
                        .HasForeignKey("fkCatPerson")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", "Role")
                        .WithMany()
                        .HasForeignKey("fkRol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("fkUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API_ClayTrack.Models.CatEmployee", b =>
                {
                    b.HasOne("API_ClayTrack.Models.CatPerson", "Person")
                        .WithMany()
                        .HasForeignKey("fkCatPerson")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", "Role")
                        .WithMany()
                        .HasForeignKey("fkRol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("fkUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API_ClayTrack.Models.CatPurchase", b =>
                {
                    b.HasOne("API_ClayTrack.Models.CatEmployee", "Employee")
                        .WithMany()
                        .HasForeignKey("fkCatEmployee")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("API_ClayTrack.Models.CatSupplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("fkCatSupplier")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("API_ClayTrack.Models.CatRawMaterial", b =>
                {
                    b.HasOne("API_ClayTrack.Models.CatUnitMeasure", "UnitMeasure")
                        .WithMany()
                        .HasForeignKey("fkCatUnitMeasure")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UnitMeasure");
                });

            modelBuilder.Entity("API_ClayTrack.Models.CatRecipe", b =>
                {
                    b.HasOne("API_ClayTrack.Models.CatSize", "Size")
                        .WithMany()
                        .HasForeignKey("fkCatSize")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Size");
                });

            modelBuilder.Entity("API_ClayTrack.Models.CatSale", b =>
                {
                    b.HasOne("API_ClayTrack.Models.CatClient", "Client")
                        .WithMany()
                        .HasForeignKey("fkCatClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("API_ClayTrack.Models.CatShipment", b =>
                {
                    b.HasOne("API_ClayTrack.Models.CatEmployee", "Employee")
                        .WithMany()
                        .HasForeignKey("fkCatEmployee")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("API_ClayTrack.Models.CatSale", "Sale")
                        .WithMany()
                        .HasForeignKey("fkCatSale")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("API_ClayTrack.Models.CatSupplier", b =>
                {
                    b.HasOne("API_ClayTrack.Models.CatPerson", "Person")
                        .WithMany()
                        .HasForeignKey("fkCatPerson")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("API_ClayTrack.Models.DetailPurchase", b =>
                {
                    b.HasOne("API_ClayTrack.Models.CatPurchase", "Purchase")
                        .WithMany()
                        .HasForeignKey("fkCatPurchase")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API_ClayTrack.Models.CatRawMaterial", "RawMaterial")
                        .WithMany()
                        .HasForeignKey("fkCatRawMaterial")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Purchase");

                    b.Navigation("RawMaterial");
                });

            modelBuilder.Entity("API_ClayTrack.Models.DetailRecipeColor", b =>
                {
                    b.HasOne("API_ClayTrack.Models.CatColor", "Color")
                        .WithMany()
                        .HasForeignKey("fkCatColor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API_ClayTrack.Models.CatRecipe", "Recipe")
                        .WithMany()
                        .HasForeignKey("fkCatRecipe")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Color");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("API_ClayTrack.Models.DetailRecipeRawMaterial", b =>
                {
                    b.HasOne("API_ClayTrack.Models.CatRawMaterial", "RawMaterial")
                        .WithMany()
                        .HasForeignKey("fkCatRawMaterial")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API_ClayTrack.Models.CatRecipe", "Recipe")
                        .WithMany()
                        .HasForeignKey("fkCatRecipe")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RawMaterial");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("API_ClayTrack.Models.DetailSale", b =>
                {
                    b.HasOne("API_ClayTrack.Models.CatRecipe", "Recipe")
                        .WithMany()
                        .HasForeignKey("RecipeidCatRecipe")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API_ClayTrack.Models.CatSale", "Sale")
                        .WithMany()
                        .HasForeignKey("fkCatSale")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipe");

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
